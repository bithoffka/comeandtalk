from sqlite3 import *
from threading import *
from gspread import *
from datetime import *

# TECHNICAL HUETA START
# admin = service_account(filename="/Users/alex/vsc/credentials.json")
# worksh = admin.open("main_db").sheet1
# TECHNICAL HUETA END

id1110 = ["–î–µ—Ç—Å–∫–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
id1120 = ["–î–µ—Ç—Å–∫–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–õ–æ–≥–æ–ø–µ–¥"]
id1130 = ["–î–µ—Ç—Å–∫–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ"]
id1210 = ["–î–µ—Ç—Å–∫–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è"]
id1310 = ["–î–µ—Ç—Å–∫–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–†–∞–∑–≤–∏—Ç–∏–µ"]
id2110 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ"]
id2120 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞"]
id2130 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠/–ï–ì–≠/–í–ü–†"]
id2140 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
id2150 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ê—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫"]
id2160 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫"]
id2210 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è"]
id2220 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–•–∏–ø-–•–æ–ø"]
id2230 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ö–∞—Ä–∞—Ç–µ"]
id2310 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ"]
id2320 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–ê–∫—Ç–µ—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ"]
id2330 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–ò—Å—Å–∫—É—Å—Ç–≤–æ–≤–µ–¥–µ–Ω–∏–µ"]
id2340 = ["–ü–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è"]
id3110 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
id3120 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ê—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫"]
id3130 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫"]
id3140 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫"]
id3210 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–ô–æ–≥–∞"]
id3220 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–§–∏—Ç–Ω–µ—Å"]
id3310 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–û—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –∏—Å–∫—É—Å—Ç–≤–æ"]
id3320 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–ê–∫—Ç–µ—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ"]
id3330 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ"]
id3340 = ["–í–∑—Ä–æ—Å–ª–æ–µ", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è"]

def Generate_class_id(data_dictionary):
    class_type = data_dictionary["class_type"]
    age_group = data_dictionary["age_group"]
    direction = data_dictionary["direction"]

    catid = None
    
    if age_group == "üë∂–î–µ—Ç–∏ (4-7 –ª–µ—Ç)":
        if direction == "üéì–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è":
            if class_type == "üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id1110", "full_id": id1110}
            elif class_type == "üî†–õ–æ–≥–æ–ø–µ–¥":
                catid = {"id": "id1120", "full_id": id1120}
            elif class_type == "üìö–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ":
                catid = {"id": "id1130", "full_id": id1130}
        elif direction == "ü•ã–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è":
            if class_type == "üíÉ–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è":
                catid = {"id": "id1210", "full_id": id1210}
        elif direction == "üé®–¢–≤–æ—Ä—á–µ—Å–∫–∞—è":
            if class_type == "üßê–†–∞–∑–≤–∏—Ç–∏–µ":
                catid = {"id": "id1310", "full_id": id1310}
    if age_group == "üë±–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (7-18 –ª–µ—Ç)":
        if direction == "üéì–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è":
            if class_type == "üìö–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ":
                catid = {"id": "id2110", "full_id": id2110}
            elif class_type == "üî¢–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞":
                catid = {"id": "id2120", "full_id": id2120}
            elif class_type == "üìñ–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠/–ï–ì–≠/–í–ü–†":
                catid = {"id": "id2130", "full_id": id2130}
            elif class_type == "üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id2140", "full_id": id2140}
            elif class_type == "üá¶üá≤–ê—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id2150", "full_id": id2150}
            elif class_type == "üá™üá∏–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id2160", "full_id": id2160}
        if direction == "ü•ã–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è":
            if class_type == "üíÉ–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è":
                catid = {"id": "id2210", "full_id": id2210}
            elif class_type == "üîä–•–∏–ø-–•–æ–ø":
                catid = {"id": "id2220", "full_id": id2220}
            elif class_type == "ü•ã–ö–∞—Ä–∞—Ç–µ":
                catid = {"id": "id2230", "full_id": id2230}
        if direction == "üé®–¢–≤–æ—Ä—á–µ—Å–∫–∞—è":
            if class_type == "üé®–†–∏—Å–æ–≤–∞–Ω–∏–µ":
                catid = {"id": "id2310", "full_id": id2310}
            elif class_type == "üé≠–ê–∫—Ç–µ—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ":
                catid = {"id": "id2320", "full_id": id2320}
            elif class_type == "üñº–ò—Å—Å–∫—É—Å—Ç–≤–æ–≤–µ–¥–µ–Ω–∏–µ":
                catid = {"id": "id2330", "full_id": id2330}
            elif class_type == "üíÉ–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è":
                catid = {"id": "id2340", "full_id": id2340}
    if age_group == "üßî‚Äç‚ôÇÔ∏è–í–∑—Ä–æ—Å–ª—ã–µ (18-81 –ª–µ—Ç)":
        if direction == "üéì–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è":
            if class_type == "üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id3110", "full_id": id3110}
            elif class_type == "üá¶üá≤–ê—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id3120", "full_id": id3120}
            elif class_type == "üá™üá∏–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id3130", "full_id": id3130}
            elif class_type == "üá´üá∑–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫":
                catid = {"id": "id3140", "full_id": id3140}
        if direction == "ü•ã–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è":
            if class_type == "üßò–ô–æ–≥–∞":
                catid = {"id": "id3210", "full_id": id3210}
            elif class_type == "üí™–§–∏—Ç–Ω–µ—Å":
                catid = {"id": "id3220", "full_id": id3220}
        if direction == "üé®–¢–≤–æ—Ä—á–µ—Å–∫–∞—è":
            if class_type == "üé§–û—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –∏—Å–∫—É—Å—Ç–≤–æ":
                catid = {"id": "id3310", "full_id": id3310}
            elif class_type == "üé≠–ê–∫—Ç–µ—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ":
                catid = {"id": "id3320", "full_id": id3320}
            elif class_type == "üñº–†–∏—Å–æ–≤–∞–Ω–∏–µ":
                catid = {"id": "id3330", "full_id": id3330}
            elif class_type == "üíÉ–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è":
                catid = {"id": "id3340", "full_id": id3340}

    return catid


def SetPaidLessonsAmount(cat_id, paid_lessons):
    with connect("MAIN_db.db") as con:
        cur = con.cursor()
#       cur.execute(''' CREATE TABLE IF NOT EXISTS "catid_db" (
#	    "cat_id"	INTEGER NOT NULL,
#	    "class_id"	TEXT,
#	    "paid_lessons"	INTEGER,
#	    "TID"	INTEGER,
#	    PRIMARY KEY("cat_id")
#        );''')
        cur.execute(f'''UPDATE catid_db 
        SET paid_lessons = {paid_lessons}
        WHERE cat_id = {cat_id}
        ''')
        
        data1 = cur.execute("SELECT * FROM catid_db").fetchall()
        print(data1)


def EstablishNewPupil(data_dictionary):
    with connect("MAIN_db.db") as con:
        cur = con.cursor()
        try:
            catID = Generate_class_id(data_dictionary) 
            cur.execute(f'''INSERT INTO catid_db_for_{datetime.now().strftime("%m%Y")} (name, TID, class_id, status)
                           VALUES (?, ?, ?, 2)''',
                        (data_dictionary["TNAME"], data_dictionary["TID"], catID["id"]))
        except OperationalError or ProgrammingError as e:
            print("An error occurred:", e)


def getPersonInfoFromcatiddb(TID, index):
    with connect("MAIN_db.db") as con:
        cur = con.cursor()

        catID_list = []
        classID_list = []
        missed_lessons_list = []
        paid_lessons_list = []
        name_list = []

        cur.execute("""SELECT cat_id, class_id, missed_lessons, paid_lessons, name 
        FROM catid_db
        WHERE TID = ?
        """, (str(TID),))

        rows = cur.fetchall()

    for row in rows:
        catID_list.append(row[0])
        classID_list.append(row[1])
        missed_lessons_list.append(row[2])
        paid_lessons_list.append(row[3])
        name_list.append(row[4])

    len_of_lists = len(catID_list)

    try:
        return {"catID": catID_list[index], "classID": classID_list[index], "missed_lessons": missed_lessons_list[index], "paid_lessons": paid_lessons_list[index] ,"name": name_list[index], "amount_of_returned_lists": len_of_lists}
    except IndexError:
        return "Index out of range for the given TID."


#print(getPersonInfoFromcatiddb(1440788864, 0))

#def getPersonInfoFromcatiddb(TID, index):
#    with connect("MAIN_db.db") as con:
#        cur = con.cursor()
#        catID_list = []
#        classID_list = []
#        catID = cur.execute("""SELECT cat_id 
#            FROM catid_db
#            WHERE TID = ?
#            """, (str(TID),))
#        for i in range(0, len(catID)):
#            catID = cur.execute("""SELECT cat_id 
#            FROM catid_db
#            WHERE TID = ?
#            """, (str(TID),))
#            catID = cur.fetchall()
#            catID = catID[i]
#            catID_list.append(catID)
#
#            classID = cur.execute("""SELECT class_id 
#            FROM catid_db
#            WHERE TID = ?
#            """, (str(TID),))
#            classID = cur.fetchall()
#            classID = classID[i]
#            classID_list.append(classID)
#        try:
#            return {"catID": catID_list[index], "classID": classID_list[index]}
#        except:
#            pass



#def CopyTableIntoGoogle():
#    with connect("MAIN_db.db") as con:
#        cur = con.cursor()
#        row_count = 1
#        col_count = 1
#        my_num_inlist = cur.execute(f'''SELECT {col_count} from catid_db 
#                            WHERE rowid = "{str(row_count)}" ''')
#        while True:
#            if my_num_inlist != None:
#                worksh.update_cell(row_count, col_count, 1)
#                col_count =+ 1
#            else:
#                row_count =+ 1
#                col_count = 1
#
#CopyTableIntoGoogle()

    
        


#cur.execute(''' CREATE TABLE "catid_db" (
#	"cat_id"	INTEGER NOT NULL,
#	"class_id"	TEXT,
#	"paid_lessons"	INTEGER,
#	"TID"	INTEGER,
#	PRIMARY KEY("cat_id")
#);''')
#con.commit()
#
#cur.execute('''INSERT INTO catid_db (class_id, paid_lessons)
#VALUES ('id111', 1)
#''')
#cur.execute("""UPDATE catid_db
#SET class_id = 'id212', paid_lessons = '5', cat_id = 2
#WHERE cat_id = 1;                 
#""")


#def getMissedClassesAmount():
#    for i in range(2, 20):
#        CATIDdt = worksh.cell(i, 2).value
#        NAMEval = worksh.cell(i, 1).value
#        if CATIDdt:
#            try:
#                with connect("MAIN_db.db") as con:
#                    cur = con.cursor()
#                    cur.execute(f'''INSERT INTO catid_db (cat_id, name) 
#                                 VALUES (?, ?);''', (int(CATIDdt), NAMEval))
#            except IntegrityError:
#                i += 1
#
#getMissedClassesAmount()